from aiogram import Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
from database import get_active_session, get_or_create_exercise_id, close_active_session
from utils import parse_exercise, format_exercise_summary
from services import recognize_voice
from datetime import datetime
from config import bot, storage, TELEGRAM_TOKEN
import sqlite3
import aiohttp
import aiofiles
import os
import tempfile

dp = Dispatcher(storage=storage)


class WorkoutState(StatesGroup):
    ACTIVE = State()


@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ /start
    await state.clear()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–°—Ç–∞—Ä—Ç"), types.KeyboardButton(text="–°—Ç–æ–ø")]],
        resize_keyboard=True
    )
    await message.answer("–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=keyboard)


@dp.message(F.text == "–°—Ç–∞—Ä—Ç")
async def start_workout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω FSM, –∞ –Ω–µ –ª–∏—à–µ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    if current_state == WorkoutState.ACTIVE.state:
        await message.answer("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–µ. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –≤–ø—Ä–∞–≤–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –°—Ç–æ–ø, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.")
        return

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±—É–¥—å-—è–∫—É –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –≤ –ë–î (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–±–æ—é)
    close_active_session(user_id)

    conn = sqlite3.connect("workouts.db")
    c = conn.cursor()
    c.execute("INSERT INTO training_sessions (user_id, started_at) VALUES (?, ?)",
              (user_id, datetime.now()))
    session_id = c.lastrowid
    conn.commit()
    conn.close()

    await state.set_state(WorkoutState.ACTIVE)
    await state.update_data(session_id=session_id)
    await message.answer(
        "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –≤–ø—Ä–∞–≤–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "‚Ä¢ '–ó—Ä–æ–±–∏–≤ 20 –≤—ñ–¥—Ç–∏—Å–∫–∞–Ω—å'\n"
        "‚Ä¢ '–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è 30 —Ä–∞–∑—ñ–≤ –∑ –≤–∞–≥–æ—é 20 –∫–≥'\n"
        "‚Ä¢ '15 –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω—å'\n"
        "‚Ä¢ '–ñ–∏–º –ª–µ–∂–∞—á–∏ 12 –ø–æ–≤—Ç–æ—Ä—ñ–≤ –∑ –≤–∞–≥–æ—é 80 –∫–≥'\n\n"
        "–¢–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! üé§"
    )


@dp.message(F.text == "–°—Ç–æ–ø")
async def stop_workout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()

    if current_state != WorkoutState.ACTIVE.state:
        await message.answer("–í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏.")
        return

    session_id = get_active_session(user_id)
    if not session_id:
        await message.answer("–°–µ—Å—ñ—é –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É.")
        await state.clear()
        return

    conn = sqlite3.connect("workouts.db")
    c = conn.cursor()
    c.execute("UPDATE training_sessions SET ended_at = ? WHERE id = ?",
              (datetime.now(), session_id))

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–ø—Ä–∞–≤ (–±–µ–∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤ SQL)
    c.execute('''SELECT e.name, ee.reps, ee.weight
                 FROM exercise_entries ee
                 JOIN exercises e ON ee.exercise_id = e.id
                 WHERE ee.session_id = ?
                 ORDER BY e.name, ee.timestamp''', (session_id,))
    exercises = c.fetchall()
    conn.commit()
    conn.close()

    if not exercises:
        await message.answer("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≤–ø—Ä–∞–≤–∏.")
    else:
        summary = "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –∑—Ä–æ–±–∏–ª–∏:\n"
        formatted_exercises = format_exercise_summary(exercises)
        summary += "\n".join(formatted_exercises)
        await message.answer(summary)

    await state.clear()


@dp.message(Command("last"))
async def cmd_last(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("workouts.db")
    c = conn.cursor()
    c.execute(
        "SELECT id, started_at FROM training_sessions WHERE user_id = ? AND ended_at IS NOT NULL ORDER BY ended_at DESC LIMIT 1",
        (user_id,))
    session = c.fetchone()
    if not session:
        await message.answer("–í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–µ—Ä—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        conn.close()
        return

    c.execute('''SELECT e.name, ee.reps, ee.weight
                 FROM exercise_entries ee
                 JOIN exercises e ON ee.exercise_id = e.id
                 WHERE ee.session_id = ?
                 ORDER BY e.name, ee.timestamp''', (session[0],))
    exercises = c.fetchall()
    conn.close()

    if not exercises:
        await message.answer("–û—Å—Ç–∞–Ω–Ω—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤–ø—Ä–∞–≤.")
    else:
        session_date = datetime.fromisoformat(session[1]).strftime("%d.%m.%Y %H:%M")
        summary = f"üìä –û—Å—Ç–∞–Ω–Ω—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ({session_date}):\n"
        formatted_exercises = format_exercise_summary(exercises)
        summary += "\n".join(formatted_exercises)
        await message.answer(summary)


def get_approach_word(count):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '–ø—ñ–¥—Ö—ñ–¥' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    if count % 10 == 1 and count % 100 != 11:
        return "–ø—ñ–¥—Ö—ñ–¥"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "–ø—ñ–¥—Ö–æ–¥–∏"
    else:
        return "–ø—ñ–¥—Ö–æ–¥—ñ–≤"

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("workouts.db")
    c = conn.cursor()

    c.execute("SELECT COUNT(*) FROM training_sessions WHERE user_id = ? AND ended_at IS NOT NULL", (user_id,))
    session_count = c.fetchone()[0]

    c.execute(
        "SELECT COUNT(*) FROM exercise_entries WHERE session_id IN (SELECT id FROM training_sessions WHERE user_id = ?)",
        (user_id,))
    exercise_count = c.fetchone()[0]

    c.execute('''SELECT e.name, COUNT(*) as count, SUM(ee.reps) as total_reps
                 FROM exercise_entries ee
                 JOIN exercises e ON ee.exercise_id = e.id
                 WHERE ee.session_id IN (SELECT id FROM training_sessions WHERE user_id = ?)
                 GROUP BY e.name
                 ORDER BY count DESC
                 LIMIT 3''', (user_id,))
    top_exercises = c.fetchall()

    conn.close()

    if session_count == 0:
        await message.answer("–í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–µ—Ä—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        return

    response = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    response += f"üèãÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {session_count}\n"
    response += f"üí™ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ø—Ä–∞–≤: {exercise_count}\n\n"

    if top_exercises:
        response += "üèÜ –¢–æ–ø-3 –≤–ø—Ä–∞–≤–∏:\n"
        for i, (name, count, total_reps) in enumerate(top_exercises, 1):
            approach_word = get_approach_word(count)
            response += f"{i}. {name}: {total_reps} –ø–æ–≤—Ç–æ—Ä—ñ–≤ ({count} {approach_word})\n"

    await message.answer(response)


@dp.message(F.voice)
async def process_voice_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()

    if current_state != WorkoutState.ACTIVE.state:
        await message.answer("–©–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏, —Å–ø–µ—Ä—à—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç")
        return

    session_id = get_active_session(user_id)
    if not session_id:
        await message.answer("–©–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏, —Å–ø–µ—Ä—à—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç")
        await state.clear()
        return

    try:
        processing_message = await message.answer("üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

        voice_file = await bot.get_file(message.voice.file_id)

        temp_dir = tempfile.gettempdir()
        temp_file_path = os.path.join(temp_dir, f"voice_{message.voice.file_id}.ogg")

        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{voice_file.file_path}") as resp:
                async with aiofiles.open(temp_file_path, 'wb') as f:
                    async for chunk in resp.content.iter_chunked(1024):
                        await f.write(chunk)

        recognized_text = await recognize_voice(temp_file_path)

        await processing_message.delete()

        if not recognized_text:
            await message.answer(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
            return

        await message.answer(f"üéØ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: \"{recognized_text}\"")

        exercise_data = parse_exercise(recognized_text)
        if not exercise_data or 'name' not in exercise_data or 'reps' not in exercise_data:
            await message.answer(
                "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –æ–ø–∏—Å –≤–ø—Ä–∞–≤–∏.\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "‚Ä¢ '–ó—Ä–æ–±–∏–≤ 15 –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω—å'\n"
                "‚Ä¢ '–í—ñ–¥—Ç–∏—Å–∫–∞–Ω–Ω—è 20 —Ä–∞–∑—ñ–≤'\n"
                "‚Ä¢ '–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è 30 —Ä–∞–∑—ñ–≤ –∑ –≤–∞–≥–æ—é 20 –∫–≥'"
            )
            return

        exercise_id = get_or_create_exercise_id(exercise_data['name'])
        conn = sqlite3.connect("workouts.db")
        c = conn.cursor()
        c.execute(
            "INSERT INTO exercise_entries (session_id, exercise_id, reps, weight, timestamp) VALUES (?, ?, ?, ?, ?)",
            (session_id, exercise_id, exercise_data['reps'], exercise_data.get('weight'), datetime.now()))
        conn.commit()
        conn.close()

        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {exercise_data['name']} ‚Äì {exercise_data['reps']} –ø–æ–≤—Ç–æ—Ä—ñ–≤" +
                             (f" –∑ –≤–∞–≥–æ—é {exercise_data['weight']} –∫–≥" if exercise_data.get('weight') else ""))

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")


@dp.message(WorkoutState.ACTIVE, F.text & ~F.text.in_(["–°—Ç–∞—Ä—Ç", "–°—Ç–æ–ø"]))
async def process_exercise_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    session_id = get_active_session(user_id)

    if not session_id:
        await message.answer("–©–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏, —Å–ø–µ—Ä—à—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç")
        await state.clear()  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —è–∫—â–æ —Å–µ—Å—ñ—ó –Ω–µ–º–∞—î
        return

    exercise_data = parse_exercise(message.text)
    if not exercise_data or 'name' not in exercise_data or 'reps' not in exercise_data:
        await message.answer(
            "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –æ–ø–∏—Å –≤–ø—Ä–∞–≤–∏.\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "‚Ä¢ '–ó—Ä–æ–±–∏–≤ 15 –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω—å'\n"
            "‚Ä¢ '–í—ñ–¥—Ç–∏—Å–∫–∞–Ω–Ω—è 20 —Ä–∞–∑—ñ–≤'\n"
            "‚Ä¢ '–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è 30 —Ä–∞–∑—ñ–≤ –∑ –≤–∞–≥–æ—é 20 –∫–≥'"
        )
        return

    exercise_id = get_or_create_exercise_id(exercise_data['name'])
    conn = sqlite3.connect("workouts.db")
    c = conn.cursor()
    c.execute("INSERT INTO exercise_entries (session_id, exercise_id, reps, weight, timestamp) VALUES (?, ?, ?, ?, ?)",
              (session_id, exercise_id, exercise_data['reps'], exercise_data.get('weight'), datetime.now()))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {exercise_data['name']} ‚Äì {exercise_data['reps']} –ø–æ–≤—Ç–æ—Ä—ñ–≤" +
                         (f" –∑ –≤–∞–≥–æ—é {exercise_data['weight']} –∫–≥" if exercise_data.get('weight') else ""))


@dp.message(F.text & ~F.text.in_(["–°—Ç–∞—Ä—Ç", "–°—Ç–æ–ø"]))
async def handle_unknown_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != WorkoutState.ACTIVE.state:
        await message.answer("–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' üèãÔ∏è")